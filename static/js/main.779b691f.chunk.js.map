{"version":3,"sources":["app/PakMelkToch.js","app/Banner.js","app/ExtLinkToch.js","app/App.js","serviceWorker.js","index.js"],"names":["whiteLineStyles","fill","stroke","strokeLinecap","strokeLinejoin","strokeWidth","xmlns","viewBox","style","width","height","points","d","transform","x1","y1","x2","y2","Banner","caption","subtitle","primaryButtons","secondaryButtons","className","PakMelkToch","x","y","enableBackground","verticalAlign","bannerPrimaryButtons","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wSAEMA,G,kBAAkB,CACvBC,KAAM,OACNC,OAAQ,OACRC,cAAe,QACfC,eAAgB,QAChBC,YAAa,SAGC,oBAAM,yBACpBC,MAAM,6BAA6BC,QAAQ,iBAAiBC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAC5F,8CACA,6BAASF,MAAOR,EAAiBW,OAAO,mDACxC,6BAASH,MAAOR,EAAiBW,OAAO,2DACxC,8BAAUH,MAAOR,EAAiBW,OAAO,0CACzC,0BAAMH,MAAOR,EAAiBY,EAAE,YAAYC,UAAU,qBACtD,6BAASL,MAAOR,EAAiBW,OAAO,6CACxC,0BAAMH,MAAOR,EAAiBc,GAAG,OAAOC,GAAG,QAAQC,GAAG,IAAIC,GAAG,a,MCd/C,SAASC,EAAT,GAAiH,IAAD,IAA9FC,eAA8F,MAApF,eAAoF,MAApEC,gBAAoE,MAAzD,oBAAyD,EAApCC,EAAoC,EAApCA,eAAgBC,EAAoB,EAApBA,iBAC1G,OACC,yBAAKC,UAAU,UACd,yBAAKA,UAAU,cACd,yBAAKA,UAAU,gBACd,kBAACC,EAAD,OAED,yBAAKD,UAAU,iBACd,yBAAKA,UAAU,kBAAkBJ,GACjC,yBAAKI,UAAU,mBAAmBH,KAGpC,yBAAKG,UAAU,iBACbF,EAAiB,6BAChBA,GACO,KACRC,EAAmB,6BAClBA,GACO,O,UCpBPtB,EAAkB,CACvBE,OAAQ,OACRD,KAAM,QAGQ,oBAAM,yBACpBK,MAAM,6BAA6BmB,EAAE,MAAMC,EAAE,MAAMnB,QAAQ,gBAAgBoB,iBAAiB,oBAAoBnB,MAAO,CAAEC,MAAO,OAAQC,OAAQ,SAAUkB,cAAe,WACzK,8CACA,uBAAGpB,MAAOR,GACT,0BAAMY,EAAE,iNACR,0BAAMA,EAAE,4BACR,0BAAMA,EAAE,gECMJiB,EAAuB,oCAC5B,uBAAGC,KAAK,0CAA0CC,OAAO,SAASC,IAAI,uBAAtE,YAAqG,kBAAC,EAAD,OACrG,uBAAGF,KAAK,0BAA0BC,OAAO,SAASC,IAAI,uBAAtD,UAAmF,kBAAC,EAAD,QCThEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNNC,IAASC,OACR,kBAAC,IAAD,KACC,mBFSa,WAad,OACC,oCACC,yBAAKhB,UAAU,aAAaf,MAAO,CAAEE,OAAqB,UACzD,kBAAC,EAAD,CAAQW,eAAgBQ,EAAsBP,iBANlB,QAQ7B,yBAAKC,UAAU,gBE3BhB,OAEDiB,SAASC,eAAe,SDmHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.779b691f.chunk.js","sourcesContent":["import React from 'react';\n\nconst whiteLineStyles = {\n\tfill: 'none',\n\tstroke: '#fff',\n\tstrokeLinecap: 'round',\n\tstrokeLinejoin: 'round',\n\tstrokeWidth: '18px',\n};\n\nexport default () => <svg\n\txmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 461 564.41\" style={{ width: 'auto', height: '2em' }}>\n\t<title>pakmelktoch</title>\n\t<polygon style={whiteLineStyles} points=\"9 164.03 224 186.11 224 554.5 9 451.5 9 164.03\"/>\n\t<polygon style={whiteLineStyles} points=\"452 445.96 224 555.41 224 185.96 452 162.46 452 445.96\"/>\n\t<polyline style={whiteLineStyles} points=\"224.5 186.46 337.5 76.46 451.5 162.46\"/>\n\t<path style={whiteLineStyles} d=\"M0,161.46\" transform=\"translate(-16.5)\"/>\n\t<polygon style={whiteLineStyles} points=\"98 25.6 337 9 337 77.96 98 79.47 98 25.6\"/>\n\t<line style={whiteLineStyles} x1=\"98.5\" y1=\"78.46\" x2=\"9\" y2=\"163.96\"/>\n</svg>","import React from 'react';\nimport PakMelkToch from './PakMelkToch.js';\nimport './Banner.css';\n\nexport default function Banner({ caption = 'Wybe Minnebo', subtitle = 'Internet code guy', primaryButtons, secondaryButtons }) {\n\treturn (\n\t\t<div className='banner'>\n\t\t\t<div className='banner-top'>\n\t\t\t\t<div className='banner__left'>\n\t\t\t\t\t<PakMelkToch />\n\t\t\t\t</div>\n\t\t\t\t<div className='banner__right'>\n\t\t\t\t\t<div className='banner-caption'>{caption}</div>\n\t\t\t\t\t<div className='banner-subtitle'>{subtitle}</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"banner-bottom\">\n\t\t\t\t{primaryButtons ? <div>\n\t\t\t\t\t{primaryButtons}\n\t\t\t\t</div> : null}\n\t\t\t\t{secondaryButtons ? <div>\n\t\t\t\t\t{secondaryButtons}\n\t\t\t\t</div> : null}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n","import React from 'react';\n\nconst whiteLineStyles = {\n\tstroke: 'none',\n\tfill: '#fff'\n};\n\nexport default () => <svg\n\txmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" viewBox=\"0 0 1000 1000\" enableBackground=\"new 0 0 1000 1000\" style={{ width: 'auto', height: '0.75em', verticalAlign: 'middle' }}>\n\t<title>pakmelktoch</title>\n\t<g style={whiteLineStyles}>\n\t\t<path d=\"M908.3,892.7c0,8.7-7,15.7-15.7,15.7H107.3c-8.7,0-15.7-7-15.7-15.7V107.3c0-8.7,7-15.7,15.7-15.7h229.3V10h-311C17,10,10,17,10,25.7v948.6c0,8.7,7,15.7,15.7,15.7h948.6c8.7,0,15.7-7,15.7-15.7v-311h-81.7V892.7z\" />\n\t\t<path d=\"M500,10l490,490V10H500z\" />\n\t\t<path d=\"M850.6,91.7l57.7,57.7L388.6,669.1l-57.7-57.7L850.6,91.7z\" />\n\t</g>\n</svg>","import React, {\n\t// Fragment,\n\t// useState,\n\t// useCallback,\n\t// useEffect\n} from 'react';\n// import {\n// \tLink,\n// \tuseLocation\n// } from \"react-router-dom\";\nimport Banner from './Banner';\n// import JOURNAL_ENTRIES from '../articles';\nimport './App.css';\nimport ExtLink from './ExtLinkToch';\n// import Routes from './Routes';\n\n// const projectsMd = JOURNAL_ENTRIES.find(entry => entry.baseName.split('.')[0] === 'projects');\n\n\nconst bannerPrimaryButtons = <>\n\t<a href=\"https://www.linkedin.com/in/wybeminnebo\" target=\"_blank\" rel=\"noopener noreferrer\">LinkedIn <ExtLink /></a>\n\t<a href=\"https://github.com/wvbe\" target=\"_blank\" rel=\"noopener noreferrer\">Github <ExtLink /></a>\n</>;\nexport default function App () {\n\n\t// const location = useLocation();\n\t// const isHomePage = !location.pathname || location.pathname === '/';\n\t// const bannerSecondaryButtons = <>\n\t// \t{!isHomePage && <Link to='/' style={{ opacity: 0.3 }}>&lt;</Link>}\n\t// \t<Link to={`/journal`}>Journal</Link>\n\t// \t<Link to={`/journal/${projectsMd.baseName}`}>Projects</Link>\n\t// </>;\n\n\tconst bannerSecondaryButtons = null;\n\tconst isHomePage = true;\n\n\treturn (\n\t\t<>\n\t\t\t<div className='app-banner' style={{ height: isHomePage ? '100vh' : '66vh' }}>\n\t\t\t\t<Banner primaryButtons={bannerPrimaryButtons} secondaryButtons={bannerSecondaryButtons} />\n\t\t\t</div>\n\t\t\t<div className='app-body'>\n\t\t\t\t{/* <Routes /> */}\n\t\t\t</div>\n\t\t</>\n\t);\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport './app/reset.css';\nimport './app/html.css';\nimport './app/index.css';\nimport App from './app/App';\n\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n\t<BrowserRouter>\n\t\t<App />\n\t</BrowserRouter>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}